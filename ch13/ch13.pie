#lang pie


(claim +
  (-> Nat Nat
      Nat))

(claim step-+
  (-> Nat
      Nat))

(define step-+
  (lambda (n)
    (add1 n)))

(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

(claim double
  (-> Nat
      Nat))

(define double
  (lambda (n)
    (iter-Nat n
      0
      (+ 2))))

(claim Even
  (-> Nat
      U))

(define Even
  (lambda (n)
    (Sigma ((half Nat))
      (= Nat n (double half)))))

(claim Odd
  (-> Nat
      U))

(define Odd
  (lambda (n)
    (Sigma ((haf Nat))
      (= Nat n (add1 (double haf))))))

(claim zero-is-even
  (Even 0))

(define zero-is-even
  (cons 0
    (same 0)))

(claim add1-even->odd
  (Pi ((n Nat))
    (-> (Even n)
        (Odd (add1 n)))))

(define add1-even->odd
  (lambda (n e-n)
    (cons (car e-n)
      (cong (cdr e-n) (+ 1)))))

(claim add1-odd->even
  (Pi ((n Nat))
    (-> (Odd n)
        (Even (add1 n)))))

(define add1-odd->even
  (lambda (n o-n)
    (cons (add1 (car o-n))
      (cong (cdr o-n) (+ 1)))))

(claim even-or-odd
  (Pi ((n Nat))
    (Either (Even n) (Odd n))))

(claim mot-even-or-odd
  (-> Nat
      U))

(define mot-even-or-odd
  (lambda (k)
    (Either (Even k) (Odd k))))

(claim base-even-or-odd
  (Either (Even zero) (Odd zero)))

(define base-even-or-odd
  (left zero-is-even))

(claim step-even-or-odd
  (Pi ((n Nat))
    (-> (mot-even-or-odd n)
        (mot-even-or-odd (add1 n)))))

(define step-even-or-odd
  (lambda (n-1)
    (lambda (even-or-odd-n-1)
      (ind-Either even-or-odd-n-1
        (lambda (e-or-o)
          (mot-even-or-odd (add1 n-1)))
        (lambda (e-n-1)
          (right
            (add1-even->odd n-1 e-n-1)))
        (lambda (o-n-1)
          (left
            (add1-odd->even n-1 o-n-1)))))))

(define even-or-odd
  (lambda (n)
    (ind-Nat n
      mot-even-or-odd
      base-even-or-odd
      step-even-or-odd)))