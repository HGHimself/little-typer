#lang pie

(claim +
  (-> Nat Nat
      Nat))

(claim step-+
  (-> Nat
      Nat))

(define step-+
  (lambda (+n-1)
    (add1 +n-1)))

(define +
  (lambda (a b)
    (iter-Nat a
      b
      step-+)))


(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))

(claim base-incr=add1
  (= Nat (incr zero) (add1 zero)))

(define base-incr=add1
  (same (add1 zero)))

(claim mot-incr=add1
  (-> Nat
      U))

(define mot-incr=add1
  (lambda (k)
    (= Nat (incr k) (add1 k))))

(claim step-incr=add1
  (Pi ((n Nat))
     (-> (= Nat
           (incr n)
           (add1 n))
         (= Nat
           (add1 (incr n))
           (add1 (add1 n))))))

(define step-incr=add1
  (lambda (n-1)
    (lambda (incr=add1-n-1)
      (replace incr=add1-n-1
        mot-step-incr=add1
        (+ 1 zero)))))
        
(claim mot-step-incr=add1
  (-> Nat
      U))

(define mot-step-incr=add1
  (lambda (n)
    (+ 1 n)))

        
(define incr=add1
  (lambda (n)
    (ind-Nat n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))
  