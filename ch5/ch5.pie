#lang pie

(claim expectations
  (List Atom))

(define expectations
  (:: 'cooked
    (:: 'eaten
      (:: 'tried-cleaning
        (:: 'understood
          (:: 'slept nil))))))

(claim rugbrod
  (List Atom))

(define rugbrod
  (:: 'rye-flour
    (:: 'rye-kernals
      (:: 'water
        (:: 'sourdough
          (:: 'salt nil))))))

(claim toppings
  (List Atom))

(claim condiments
  (List Atom))

(define toppings
  (:: 'potato
    (:: 'butter nil)))

(define condiments
  (:: 'chives
    (:: 'mayonaise nil)))

(claim length
  (Pi ((E U))
    (-> (List E)
        Nat)))

(claim step-length
  (Pi ((E U))
    (-> E (List E) Nat
        Nat)))

(define step-length
  (lambda (E)
    (lambda (e es length-es)
      (add1 length-es))))

(define length
  (lambda (E)
    (lambda (es)
      (rec-List es
        0
        (step-length E)))))

(claim length-Atom
  (-> (List Atom)
      Nat))

(define length-Atom
  (length Atom))

(claim append
  (Pi ((E U))
    (-> (List E) (List E)
        (List E))))

(claim step-append
  (Pi ((E U))
    (-> E (List E) (List E)
        (List E))))

(define step-append
  (lambda (E)
    (lambda (e es append-es)
      (:: e append-es))))

(define append
  (lambda (E)
    (lambda (start end)
      (rec-List start
        end
        (step-append E)))))

(claim snoc
  (Pi ((E U))
    (-> (List E) E
        (List E))))

(define snoc
  (lambda (E)
    (lambda (es e)
      (append E
        es
        (:: e nil)))))

(claim concat
  (Pi ((E U))
    (-> (List E) (List E)
        (List E))))

(claim step-concat
  (Pi ((E U))
    (-> E (List E) (List E)
      (List E))))

(define step-concat
  (lambda (E)
    (lambda (e es concatn-1)
      (snoc E concatn-1 e))))

(define concat
  (lambda (E)
    (lambda (start end)
      (rec-List end
        start
        (step-concat E)))))

(claim reverse
  (Pi ((E U))
    (-> (List E)
        (List E))))

(claim step-reverse
  (Pi ((E U))
    (-> E (List E) (List E)
        (List E))))

(define step-reverse
  (lambda (E)
    (lambda (e es reversen-1)
      (snoc E reversen-1 e))))

(define reverse
  (lambda (E)
    (lambda (es)
      (rec-List es
        (the (List E) nil)
        (step-reverse E)))))

(claim kartoffelmad
  (List Atom))

(define kartoffelmad
  (append Atom
    (concat Atom
      toppings condiments)
    (reverse Atom
      (:: 'plate
        (:: 'rye-bread nil)))))