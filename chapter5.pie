#lang pie

(claim expectations
  (List Atom))

(define expectations
  (:: 'cooked
    (:: 'eaten
      (:: 'tried-cleaning
        (:: 'understood
          (:: 'slept nil))))))

(claim toppings
  (List Atom))

(define toppings
  (:: 'potato
    (:: 'butter nil)))

(claim condiments
  (List Atom))

(define condiments
  (:: 'chives
    (:: 'mayonnaise nil)))

(claim step-length
  (Pi ((E U))
    (-> E (List E) Nat
        Nat)))

(define step-length
  (lambda (E)
    (lambda (e es length)
      (add1 length))))

(claim length
  (Pi ((E U))
    (-> (List E)
        Nat)))

(define length
  (lambda (E)
    (lambda (es)
      (rec-List es
        0
        (step-length E)))))

(claim append
  (Pi ((E U))
    (-> (List E) (List E)
        (List E))))

(claim step-append
  (Pi ((E U))
    (-> E (List E) (List E)
        (List E))))

(define step-append
  (lambda (E)
    (lambda (e es append-es)
      (:: e append-es))))

(define append
  (lambda (E)
    (lambda (start end)
      (rec-List start
        end
        (step-append E)))))

(claim snoc
  (Pi ((E U))
    (-> (List E) E
        (List E))))

(define snoc
  (lambda (E)
    (lambda (start e)
      (rec-List start
        (:: e nil)
        (step-append E)))))

(claim concat
  (Pi ((E U))
    (-> (List E) (List E)
        (List E))))

(claim step-concat
  (Pi ((E U))
    (-> E (List E) (List E)
        (List E))))

(define step-concat
  (lambda (E)
    (lambda (e es concat-es)
      (snoc E concat-es e))))

(define concat
  (lambda (E)
    (lambda (start end)
      (rec-List start
        end
        (step-concat E)))))

(claim reverse
  (Pi ((E U))
    (-> (List E)
        (List E))))

(claim step-reverse
  (Pi ((E U))
    (-> E (List E) (List E)
        (List E))))

(define step-reverse
  (lambda (E)
    (lambda (e es reverse-es)
      (snoc E reverse-es e))))

(define reverse
  (lambda (E)
    (lambda (es)
      (rec-List es
        (the (List E) nil)
        (step-reverse E)))))

(claim kartoffelmad
  (List Atom))

(define kartoffelmad
  (append Atom
    (concat Atom
      toppings condiments)
    (reverse Atom
      (:: 'plate
        (:: 'rye-bread nil)))))