#lang pie

(claim +
  (-> Nat Nat
      Nat))

(claim step-+
  (-> Nat Nat
      Nat))

(define step-+
  (lambda (l-1 +-1)
    (add1 +-1)))

(define +
  (lambda (a b)
    (rec-Nat a
      b
      step-+)))

(claim incr
  (-> Nat
      Nat))

(define incr
  (lambda (n)
    (iter-Nat n
      1
      (+ 1))))


(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))

(claim base-incr=add1
  (= Nat (incr zero) (add1 0)))

(define base-incr=add1
  (same (add1 zero)))

(claim mot-incr=add1
  (-> Nat
      U))

(define mot-incr=add1
  (lambda (n)
    (= Nat (incr n) (add1 n))))

(claim step-incr=add1
  (Pi ((n Nat))
    (-> (= Nat
          (incr n)
          (add1 n))
        (= Nat
          (add1
            (incr n))
          (add1
            (add1 n))))))

(claim mot-step-incr=add1
  (-> Nat Nat
      U))

; mot turns the to into the whole replace function
(define mot-step-incr=add1
  (lambda (n-1 k)
    (= Nat
      (add1
        (incr n-1))
      (add1
        k))))

(define step-incr=add1
  (lambda (n-1)
    (lambda (incr=add1n-1)
      (replace incr=add1n-1
        (mot-step-incr=add1 n-1)
        (same (add1 (incr n-1)))))))

(define incr=add1
  (lambda (n)
    (ind-Nat n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))

