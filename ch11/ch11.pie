#lang pie

(claim treats
  (Vec Atom 3))

(define treats
  (vec:: 'kanelbullar
    (vec:: 'plattar
      (vec:: 'prinsesstarta vecnil))))

(claim drinks
  (List Atom))

(define drinks
  (:: 'coffee
    (:: 'cocoa nil)))

(claim +
  (-> Nat Nat
      Nat))

(claim step-+
  (-> Nat
      Nat))

(define step-+
  (lambda (+n-1)
    (add1 +n-1)))

(define +
  (lambda (a b)
    (iter-Nat a
      b
      step-+)))


(claim length
  (Pi ((E U))
    (-> (List E)
        Nat)))

(claim step-length
  (Pi ((E U))
    (-> E (List E) Nat
        Nat)))

(define step-length
  (lambda (E)
    (lambda (e es length-es)
      (add1 length-es))))

(define length
  (lambda (E)
    (lambda (es)
      (rec-List es
        0
        (step-length E)))))

(claim list->vec
  (Pi ((E U)
       (es (List E)))
    (Vec E (length E es))))

(claim mot-list->vec
  (Pi ((E U))
    (-> (List E)
      U)))

(define mot-list->vec
  (lambda (E)
    (lambda (es)
      (Vec E (length E es)))))

(claim step-list->vec
  (Pi ((E U)
       (e E)
       (es (List E)))
    (-> (mot-list->vec E es)
        (mot-list->vec E (:: e es)))))

(define step-list->vec
  (lambda (E)
    (lambda (e es)
      (lambda (list->vec-es)
        (vec:: e list->vec-es)))))

(define list->vec
  (lambda (E)
    (lambda (es)
      (ind-List es
        (mot-list->vec E)
        vecnil
        (step-list->vec E)))))

(claim vec-append
  (Pi ((E U)
       (l Nat)
       (j Nat))
    (-> (Vec E l) (Vec E j)
        (Vec E (+ l j)))))

(claim mot-vec-append
  (Pi ((E U)
       (j Nat)
       (l Nat))
    (-> (Vec E l)
        U)))

(define mot-vec-append
  (lambda (E j l)
    (lambda (es)
      (Vec E (+ l j)))))

(claim step-vec-append
  (Pi ((E U)
       (j Nat)
       (k Nat)
       (e E)
       (es (Vec E k)))
    (-> (mot-vec-append E j k es)
      (mot-vec-append E j (add1 k) (vec:: e es)))))

(define step-vec-append
  (lambda (E j k e es)
    (lambda (vec-append-es)
      (vec:: e vec-append-es))))

(define vec-append
  (lambda (E l j)
    (lambda (es end)
      (ind-Vec l es
        (mot-vec-append E j)
        end
        (step-vec-append E j)))))

(claim fika
  (Vec Atom 5))

(define fika
  (vec-append Atom 3 2
    treats
    (list->vec Atom drinks)))

(claim vec->list
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l)
        (List E))))

(claim mot-vec->list
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l)
        U)))

(define mot-vec->list
  (lambda (E)
    (lambda (l)
      (lambda (es)
        (List E)))))

(claim step-vec->list
  (Pi ((E U)
       (l Nat)
       (e E)
       (es (Vec E l)))
    (-> (mot-vec->list E l es)
        (mot-vec->list E (add1 l) (vec:: e es)))))

(define step-vec->list
  (lambda (E l e es)
    (lambda (vec->list-es)
      (:: e vec->list-es))))

(define vec->list
  (lambda (E l es)
    (ind-Vec l es
      (mot-vec->list E)
      nil
      (step-vec->list E))))

(claim list->vec->list=
  (Pi ((E U)
       (es (List E)))
    (= (List E) es
       (vec->list E
         (length E es)
         (list->vec E es)))))

(claim mot-list->vec->list=
  (Pi ((E U))
    (-> (List E)
        U)))

(define mot-list->vec->list=
  (lambda (E)
    (lambda (es)
      (= (List E) es
        (vec->list E
          (length E es)
          (list->vec E es))))))

(claim step-list->vec->list=
  (Pi ((E U)
       (e E)
       (es (List E)))
    (-> (mot-list->vec->list= E es)
        (mot-list->vec->list= E (:: e es)))))

(claim ::-fun
  (Pi ((E U))
    (-> E (List E)
        (List E))))

(define ::-fun
  (lambda (E)
    (lambda (e es)
      (:: e es))))

(define step-list->vec->list=
  (lambda (E e es)
    (lambda (list->vec->list=-es)
      (cong list->vec->list=-es (::-fun E e)))))

(define list->vec->list=
  (lambda (E es)
    (ind-List es
      (mot-list->vec->list= E)
      (same nil)
      (step-list->vec->list= E))))

(claim treat-statement
  U)

(define treat-statement
  (Pi ((some-treats (List Atom))
       (more-treats (List Atom)))
    (-> (= (List Atom)
          some-treats
          more-treats)
        (= (List Atom)
          (:: 'plattar some-treats)
          (:: 'plattar more-treats)))))

(claim ::-plattar
  (-> (List Atom)
      (List Atom)))

(define ::-plattar
  (lambda (tasty-treats)
    (:: 'plattar tasty-treats)))

(claim treat-proof
  treat-statement)

(define treat-proof
  (lambda (some-treats more-treats)
    (lambda (treats=)
      (cong treats= ::-plattar))))

(claim length-treats=
  (Pi ((some-treats (List Atom))
       (more-treats (List Atom)))
    (-> (= (List Atom)
          some-treats
          more-treats)
        (= Nat
          (length Atom some-treats)
          (length Atom more-treats)))))

(define length-treats=
  (lambda (some-treats more-treats)
    (lambda (treats=)
      (cong treats= (length Atom)))))