#lang pie

(claim =consequence
  (-> Nat Nat
      U))

(define =consequence
  (lambda (n j)
    (which-Nat n
      (which-Nat j
        Trivial
        (lambda (j-1)
          Absurd))
      (lambda (n-1)
        (which-Nat j
          Absurd
          (lambda (j-1)
            (= Nat n-1 j-1)))))))

(claim =consequence-wrong
  (-> Nat Nat
      U))

(define =consequence-wrong
  (lambda (n j)
    (which-Nat n
      (which-Nat j
        Absurd
        (lambda (j-1)
          Trivial))
      (lambda (n-1)
        (which-Nat j
          Trivial
          (lambda (j-1)
            (= Nat n-1 j-1)))))))

(claim =consequence-same
  (Pi ((n Nat))
    (=consequence n n)))

(define =consequence-same
  (lambda (n)
    (ind-Nat n
      (lambda (k)
        (=consequence k k))
      sole
      (lambda (n-1 consequence-n-1)
        (same n-1)))))

(claim use-Nat=
  (Pi ((n Nat)
       (j Nat))
    (-> (= Nat n j)
        (=consequence n j))))

(define use-Nat=
  (lambda (n j)
    (lambda (n=j)
      (replace n=j
        (lambda (k)
          (=consequence n k))
        (=consequence-same n)))))

(claim zero-not-add1
  (Pi ((n Nat))
    (-> (= Nat zero (add1 n))
        Absurd)))

(define zero-not-add1
  (lambda (n)
    (use-Nat= zero (add1 n))))

(claim donut-absurdity
  (-> (= Nat 0 6)
      (= Atom 'powdered 'glazed)))

(define donut-absurdity
  (lambda (zero=six)
    (ind-Absurd
      (zero-not-add1 5 zero=six)
      (= Atom 'powdered 'glazed))))

(claim sub1=
  (Pi ((n Nat)
       (j Nat))
    (-> (= Nat (add1 n) (add1 j))
        (= Nat n j))))

(define sub1=
  (lambda (n j)
    (use-Nat= (add1 n) (add1 j))))

(claim one-not-six
  (-> (= Nat 1 6)
      Absurd))

(define one-not-six
  (lambda (one=six)
    (zero-not-add1 4
      (sub1= 0 5 one=six))))

(claim front
  (Pi ((E U)
       (n Nat))
    (-> (Vec E (add1 n))
        E)))

(claim mot-front
  (Pi ((E U)
       (k Nat))
    (-> (Vec E k)
        U)))

(define mot-front
  (lambda (E)
    (lambda (k es)
      (Pi ((j Nat))
        (-> (= Nat k (add1 j))
            E)))))

(claim step-front
  (Pi ((E U)
       (l Nat)
       (e E)
       (es (Vec E l)))
    (-> (mot-front E l es)
        (mot-front E (add1 l) (vec:: e es)))))

(define step-front
  (lambda (E l e es)
    (lambda (front-es)
      (lambda (j eq)
        e))))

(define front
  (lambda (E l es)
    ((ind-Vec (add1 l) es
       (mot-front E)
       (lambda (j eq)
         (ind-Absurd
           (zero-not-add1 j eq)
           E))
       (step-front E))
      l (same (add1 l)))))

(claim rest
  (Pi ((E U)
       (n Nat))
    (-> (Vec E (add1 n))
        (Vec E n))))

(claim mot-rest
  (Pi ((E U)
       (k Nat))
    (-> (Vec E k)
        U)))

(define mot-rest
  (lambda (E)
    (lambda (k es)
      (Pi ((j Nat))
        (-> (= Nat k (add1 j))
            (Vec E j))))))

(claim step-rest
  (Pi ((E U)
       (l Nat)
       (e E)
       (es (Vec E l)))
    (-> (mot-rest E l es)
        (mot-rest E (add1 l) (vec:: e es)))))

(claim mot-step-rest
  (Pi ((E U))
    (-> Nat
      U)))

(define mot-step-rest
  (lambda (E)
    (lambda (j)
      (Vec E j))))

(define step-rest
  (lambda (E l e es)
    (lambda (rest-es)
      (lambda (j eq)
        (replace (sub1= l j eq)
          (mot-step-rest E)
          es)))))

(define rest
  (lambda (E l es)
    ((ind-Vec (add1 l) es
       (mot-rest E)
       (lambda (j eq)
         (ind-Absurd
           (zero-not-add1 j eq)
           (Vec E j)))
       (step-rest E))
      l (same (add1 l)))))