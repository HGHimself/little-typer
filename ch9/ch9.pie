#lang pie

(claim +
  (-> Nat Nat
      Nat))

(claim step-+
  (-> Nat
      Nat))

(define step-+
  (lambda (+n-1)
    (add1 +n-1)))

(define +
  (lambda (a b)
    (iter-Nat a
      b
      step-+)))

(claim incr
  (-> Nat
      Nat))

(define incr
  (lambda (n)
    (iter-Nat n
      1
      (+ 1))))

(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))

(claim base-incr=add1
  (= Nat (incr zero) (add1 zero)))

(define base-incr=add1
  (same (add1 zero)))

(claim mot-incr=add1
  (-> Nat
      U))

(define mot-incr=add1
  (lambda (k)
    (= Nat (incr k) (add1 k))))

(claim mot-step-incr=add1
  (-> Nat Nat
      U))

(define mot-step-incr=add1
  (lambda (n-1 k)
    (= Nat
      (add1 (incr n-1))
      (add1 k))))

(claim step-incr=add1
  (Pi ((n Nat))
     (-> (= Nat
           (incr n)
           (add1 n))
         (= Nat
           (add1 (incr n))
           (add1 (add1 n))))))

(define step-incr=add1
  (lambda (n-1)
    (lambda (incr=add1-n-1)
      (replace incr=add1-n-1
        (mot-step-incr=add1 n-1)
        (same (add1 (incr n-1)))))))
        
(define incr=add1
  (lambda (n)
    (ind-Nat n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))

(claim double
  (-> Nat
      Nat))

(claim twice
  (-> Nat
      Nat))

(define double
  (lambda (n)
    (iter-Nat n
      0
      (+ 2))))

(define twice
  (lambda (n)
    (+ n n)))

(claim add1+=+add1
  (Pi ((n Nat)
       (j Nat))
    (= Nat
       (add1 (+ n j))
       (+ n (add1 j)))))

(claim mot-add1+=+add1
  (-> Nat Nat
      U))

(define mot-add1+=+add1
  (lambda (j k)
    (= Nat
       (add1 (+ k j))
      (+ k (add1 j)))))

(claim step-add1+=+add1
  (Pi ((j Nat)
       (n-1 Nat))
    (-> (mot-add1+=+add1 j n-1)
        (mot-add1+=+add1 j (add1 n-1)))))

(define step-add1+=+add1
  (lambda (j n-1)
    (lambda (add1+=+add1-n-1)
      (cong add1+=+add1-n-1
        (+ 1)))))

(define add1+=+add1
  (lambda (n j)
    (ind-Nat n
      (mot-add1+=+add1 j)
      (same (add1 j))
      (step-add1+=+add1 j))))


(claim twice=double
  (Pi ((n Nat))
    (= Nat (twice n) (double n))))

(claim base-twice=double
  (= Nat (twice zero) (double zero)))

(define base-twice=double
  (same zero))

(claim mot-twice=double
  (-> Nat
      U))

(define mot-twice=double
  (lambda (n)
    (= Nat
      (twice n)
      (double n))))

(claim step-twice=double
  (Pi ((n-1 Nat))
    (-> (= Nat
          (twice n-1)
          (double n-1))
        (= Nat
          (twice (add1 n-1)) ; cant hoist second add1 since its a base in iter-Nat
          (double (add1 n-1)))))) ; can hoist this add1 out since n is just target here

(claim mot-step-twice=double
  (-> Nat Nat
      U))

(define mot-step-twice=double
  (lambda (n-1 k)
    (= Nat
      (add1 k)
      (add1 (add1 (double n-1))))))

(define step-twice=double
  (lambda (n-1)
    (lambda (twice=double-n-1)
      (replace (add1+=+add1 n-1 n-1)
        (mot-step-twice=double n-1)
        (cong twice=double-n-1
          (+ 2))))))

(define twice=double
  (lambda (n)
    (ind-Nat n
      mot-twice=double
      base-twice=double
      step-twice=double)))

(claim twice=double-of-17
  (= Nat (twice 17) (double 17)))

(claim twice=double-of-17-again
  (= Nat (twice 17) (double 17)))

(define twice=double-of-17
  (twice=double 17))

(define twice=double-of-17-again
  (same 34))

(claim twice-Vec
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l)
        (Vec E (twice l)))))

(claim double-Vec
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l)
        (Vec E (double l)))))

(claim mot-double-Vec
  (-> U Nat
      U))

(define mot-double-Vec
  (lambda (E k)
    (-> (Vec E k)
      (Vec E (double k)))))

(claim step-double-Vec
  (Pi ((E U)
       (l-1 Nat))
    (-> (mot-double-Vec E l-1)
        (mot-double-Vec E (add1 l-1)))))

(define step-double-Vec
  (lambda (E l-1)
      (lambda (double-Vec-l-1)
        (lambda (es)
          (vec:: (head es)
            (vec:: (head es)
              (double-Vec-l-1 (tail es))))))))

(claim base-double-Vec
  (Pi ((E U))
    (-> (Vec E zero)
      (Vec E (double zero)))))

(define base-double-Vec
  (lambda (E)
    (lambda (es)
      vecnil)))

(define double-Vec
  (lambda (E l)
    (ind-Nat l
      (mot-double-Vec E)
      (base-double-Vec E)
      (step-double-Vec E))))

(define twice-Vec
  (lambda (E l)
    (lambda (es)
      (replace (symm
                 (twice=double l))
        (lambda (k)
          (Vec E k))
        (double-Vec E l es)))))