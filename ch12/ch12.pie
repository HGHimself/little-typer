#lang pie

(claim +
  (-> Nat Nat
      Nat))

(claim step-+
  (-> Nat
      Nat))

(define step-+
  (lambda (n)
    (add1 n)))

(define +
  (lambda (n j)
    (iter-Nat n
      j
      step-+)))

(claim double
  (-> Nat
      Nat))

(define double
  (lambda (n)
    (iter-Nat n
      0
      (+ 2))))

(claim Even
  (-> Nat
      U))

(define Even
  (lambda (n)
    (Sigma ((half Nat))
      (= Nat n (double half)))))

(claim zero-is-even
  (Even 0))

(define zero-is-even
  (cons 0
    (same 0)))

(claim +two-even
  (Pi ((n Nat))
    (-> (Even n)
        (Even (+ 2 n)))))

(define +two-even
  (lambda (n e-n)
    (cons (add1 (car e-n))
      (cong (cdr e-n) (+ 2)))))

(claim two-is-even
  (Even 2))

(define two-is-even
  (+two-even 0 zero-is-even))

(claim Odd
  (-> Nat
      U))

(define Odd
  (lambda (n)
    (Sigma ((haf Nat))
      (= Nat n (add1 (double haf))))))

(claim one-is-odd
  (Odd 1))

(define one-is-odd
  (cons 0 (same 1)))

(claim thirteen-is-odd
  (Odd 13))

(define thirteen-is-odd
  (cons 6 (same 13)))

(claim add1-even->odd
  (Pi ((n Nat))
    (-> (Even n)
        (Odd (add1 n)))))

(define add1-even->odd
  (lambda (n e-n)
    (cons (car e-n)
      (cong (cdr e-n) (+ 1)))))

(claim add1-odd->even
  (Pi ((n Nat))
    (-> (Odd n)
        (Even (add1 n)))))

(define add1-odd->even
  (lambda (n o-n)
    (cons (add1 (car o-n))
      (cong (cdr o-n) (+ 1)))))

(claim repeat
  (-> (-> Nat
          Nat)
      Nat
      Nat))

(define repeat
  (lambda (f n)
    (iter-Nat n
      (f 1)
      (lambda (iter-fn-1)
        (f iter-fn-1)))))

(claim ackermann
  (-> Nat Nat
      Nat))

(define ackermann
  (lambda (n)
    (iter-Nat n
      (+ 1)
      (lambda (ackermann-n-1)
        (repeat ackermann-n-1)))))