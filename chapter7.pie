#lang pie

(claim peas
  (Pi ((how-many-peas Nat))
    (Vec Atom how-many-peas)))

(claim mot-peas
  (-> Nat
      U))

(define mot-peas
  (lambda (k)
    (Vec Atom k)))

(claim step-peas
  (Pi ((l-1 Nat))
    (-> (mot-peas l-1)
        (Vec Atom (add1 l-1))))) ; also mot peas works here

(define step-peas
  (lambda (l-1)
    (lambda (peasl-1)
      (vec:: 'pea peasl-1))))

(define peas
  (lambda (how-many-peas)
    (ind-Nat how-many-peas
      mot-peas
      vecnil
      step-peas)))

(claim also-rec-Nat
  (Pi ((X U))
    (-> Nat
        X
        (-> Nat X
            X)
        X)))

(define also-rec-Nat
  (lambda (X)
    (lambda (target base step)
      (ind-Nat target
        (lambda (k)
          X)
        base
        step))))

(claim last
  (Pi ((E U)
       (l Nat))
    (-> (Vec E (add1 l))
        E)))

(claim mot-last
  (-> U Nat
      U))

(define mot-last
  (lambda (E k)
    (-> (Vec E (add1 k))
        E)))

(claim base-last
  (Pi ((E U))
    (-> (Vec E (add1 zero))
        E)))

(define base-last
  (lambda (E)
    (lambda (es)
      (head es))))

(claim step-last
  (Pi ((E U)
       (l-1 Nat))
    (-> (-> (Vec E (add1 l-1)) ; also can be mot-last like below
            E)
        (mot-last E (add1 l-1))))) ; this will have two add1's after the mot

(define step-last
  (lambda (E) ; primed with the entry type
    (lambda (l-1 lastl-1) ; takes a function that finds the last for a list l-1
      (lambda (es) ; es is 1 too big for lastl-1, also never zero because of mot-last
        (lastl-1 (tail es)))))) ; so lastl-1 accepts tail of a list (add1 l-1)

(define last
  (lambda (E l)
    (ind-Nat l
      (mot-last E)
      (base-last E)
      (step-last E))))

(claim drop-last
  (Pi ((E U)
       (l Nat))
    (-> (Vec E (add1 l))
        (Vec E l))))

(claim base-drop-last
  (Pi ((E U))
    (-> (Vec E (add1 zero))
        (Vec E zero))))

(define base-drop-last
  (lambda (E)
    (lambda (es)
      vecnil)))

(claim mot-drop-last
  (Pi ((E U)
       (l-1 Nat))
    