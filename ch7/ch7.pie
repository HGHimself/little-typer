#lang pie

(claim peas
  (Pi ((how-many-peas Nat))
    (Vec Atom how-many-peas)))

(claim mot-peas
  (-> Nat
      U))

(define mot-peas
  (lambda (k)
    (Vec Atom k)))

(claim step-peas
  (Pi ((l-1 Nat))
    (-> (mot-peas l-1)
        (mot-peas (add1 l-1)))))

(define step-peas
  (lambda (l-1)
    (lambda (peasl-1)
      (vec:: 'pea peasl-1))))

(claim step-peas-extended
  (Pi ((l-1 Nat))
    (-> (Vec Atom l-1)
        (Vec Atom (add1 l-1)))))

(define step-peas-extended
  step-peas)

(define peas
  (lambda (how-many-peas)
    (ind-Nat how-many-peas
      mot-peas
      vecnil
      step-peas)))

(claim also-rec-Nat
  (Pi ((X U))
    (-> Nat
        X
        (-> Nat X
            X)
        X)))

(define also-rec-Nat
  (lambda (X)
    (lambda (target base step)
      (ind-Nat target
        (lambda (k)
          X)
        base
        step))))

(claim last
  (Pi ((E U)
       (l Nat))
    (-> (Vec E (add1 l))
        E)))

(claim base-last
  (Pi ((E U))
    (-> (Vec E (add1 zero))
        E)))

(define base-last
  (lambda (E)
    (lambda (es)
      (head es))))

(claim mot-last
  (-> U Nat
      U))

(define mot-last
  (lambda (E k)
    (-> (Vec E (add1 k))
        E)))