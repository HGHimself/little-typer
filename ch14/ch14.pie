#lang pie

(claim Maybe
  (-> U
      U))

(define Maybe
  (lambda (X)
    (Either X Trivial)))

(claim nothing
  (Pi ((E U))
    (Maybe E)))

(define nothing
  (lambda (E)
    (right sole)))

(claim just
  (Pi ((E U))
    (-> E
        (Maybe E))))

(define just
  (lambda (E e)
    (left e)))

(claim maybe-head
  (Pi ((E U))
    (-> (List E)
        (Maybe E))))

(define maybe-head
  (lambda (E es)
    (rec-List es
      (nothing E)
      (lambda (hd tl head-tl)
        (just E hd)))))

(claim maybe-tail
  (Pi ((E U))
    (-> (List E)
        (Maybe (List E)))))

(define maybe-tail
  (lambda (E es)
    (rec-List es
      (nothing (List E))
      (lambda (hd tl tail-tl)
        (just (List E) tl)))))

(claim list-ref
  (Pi ((E U))
    (-> Nat (List E)
        (Maybe E))))

(claim step-list-ref
  (Pi ((E U))
    (-> Nat (-> (List E)
                (Maybe E))
        (-> (List E)
            (Maybe E)))))

(define step-list-ref
  (lambda (E)
    (lambda (k-1 list-ref-k-1)
      (lambda (es)
        (ind-Either (maybe-tail E es)
          (lambda (maybe-tl)
            (Maybe E))
          (lambda (tl)
            (list-ref-k-1 tl))
          (lambda (empty)
            (nothing E)))))))

(define list-ref
  (lambda (E k)
    (rec-Nat k
      (maybe-head E)
      (step-list-ref E))))

(claim sandwich
  (-> Atom
      Atom))

(define sandwich
  (lambda (which-sandwich)
    'delicious))

(claim menu
  (Vec Atom 4))

(define menu
  (vec:: 'ratatouille
    (vec:: 'kartoffelman
      (vec:: (sandwich 'hero)
        (vec:: 'prinsesstarta vecnil)))))

(claim similarly-absurd
  (-> Absurd
      Absurd))

(define similarly-absurd
  (lambda (x)
    x))

(claim Fin
  (-> Nat
      U))

(define Fin
  (lambda (n)
    (iter-Nat n
      Absurd
      Maybe)))

(claim fzero
  (Pi ((n Nat))
    (Maybe (Fin n))))

(define fzero
  (lambda (n)
    (nothing (Fin n))))

(claim fadd1
  (Pi ((n Nat))
    (-> (Fin n)
        (Fin (add1 n)))))

(define fadd1
  (lambda (n)
    (lambda (i-1)
      (just (Fin n) i-1))))

(claim vec-ref
  (Pi ((E U)
       (l Nat))
    (-> (Fin l) (Vec E l)
        E)))
    
(claim base-vec-ref
  (Pi ((E U))
    (-> (Fin zero) (Vec E zero)
        E)))

(define base-vec-ref
  (lambda (E)
    (lambda (no-value-ever es)
      (ind-Absurd no-value-ever
        E))))

(claim step-vec-ref
  (Pi ((E U)
       (l-1 Nat))
    (-> (-> (Fin l-1)
          (Vec E l-1)
          E)
        (-> (Fin (add1 l-1))
            (Vec E (add1 l-1))
          E))))

(define step-vec-ref
  (lambda (E l-1)
    (lambda (vec-ref-l-1)
      (lambda (i es)
        (ind-Either i
          (lambda (i)
            E)
          (lambda (i-1)
            (vec-ref-l-1
              i-1 (tail es)))
          (lambda (triv)
            (head es)))))))

(define vec-ref
  (lambda (E l)
    (ind-Nat l
      (lambda (k)
        (-> (Fin k) (Vec E k)
            E))
      (base-vec-ref E)
      (step-vec-ref E))))