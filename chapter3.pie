#lang pie

(claim step-add
  (-> Nat
      Nat))

(claim add
  (-> Nat Nat
      Nat))

(define step-add
  (lambda (n-1)
    (add1 n-1)))

(define add
  (lambda (n j)
    (iter-Nat n
      j
      step-add)))

(claim step-zerop
  (-> Nat Atom
      Atom))

(define step-zerop
  (lambda (n-1 zeropn-1)
    'banana))

(claim zerop
  (-> Nat
      Atom))

(define zerop
  (lambda (n)
    (rec-Nat n
      't
      step-zerop)))

(claim step-gauss
  (-> Nat Nat
      Nat))

(define step-gauss
  (lambda (n-1 gaussn-1)
    (add (add1 n-1) gaussn-1)))

(claim gauss
  (-> Nat
      Nat))

(define gauss
  (lambda (n)
    (rec-Nat n
      zero
      step-gauss)))

(claim mul
  (-> Nat Nat
      Nat))

(claim step-mul
  (-> Nat Nat Nat
    Nat))

(define step-mul
  (lambda (j n-1 muln-1)
    (add j muln-1)))

(define mul
  (lambda (n j)
    (rec-Nat n
      0
      (step-mul j))))
      
